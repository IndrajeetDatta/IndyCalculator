
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 07 16:32:01 ICT 2019
//----------------------------------------------------

package src;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 07 16:32:01 ICT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\005\005\000" +
    "\002\005\003\000\002\002\003\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\007\003\000\002\007\003\000\002\002\003" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\010\003\000\002" +
    "\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\016\004\013\005\005\006\014\007\007\010" +
    "\016\012\012\001\002\000\016\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\011\ufffa\001\002\000\016\004\013\005" +
    "\005\006\014\007\007\010\054\012\052\001\002\000\016" +
    "\002\ufffd\004\ufffd\005\ufffd\006\045\007\044\011\ufffd\001" +
    "\002\000\016\004\013\005\005\006\014\007\007\010\054" +
    "\012\052\001\002\000\010\002\001\004\037\005\040\001" +
    "\002\000\004\002\060\001\002\000\022\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff0\011\ufff8\012\ufff0\001" +
    "\002\000\016\004\013\005\005\006\014\007\007\010\054" +
    "\012\052\001\002\000\016\004\013\005\005\006\014\007" +
    "\007\010\054\012\052\001\002\000\004\002\uffef\001\002" +
    "\000\016\004\013\005\005\006\014\007\007\010\016\012" +
    "\012\001\002\000\006\010\024\012\021\001\002\000\010" +
    "\002\ufff7\010\ufff1\012\ufff1\001\002\000\016\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0\001\002\000\016" +
    "\004\027\005\030\006\032\007\031\010\024\012\021\001" +
    "\002\000\016\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\012\ufff1\001\002\000\006\010\024\012\021\001\002\000" +
    "\010\010\ufff1\011\026\012\ufff1\001\002\000\022\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\001\002\000\022\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\001\002\000\022\002" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\001\002\000\022\002\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\001\002\000\022" +
    "\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\001\002\000\010\004\037\005\040\011\036" +
    "\001\002\000\004\011\035\001\002\000\022\002\uffea\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\001\002\000\016\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\011\ufff9\001\002\000\006\010\042\012\041\001\002" +
    "\000\006\010\042\012\041\001\002\000\016\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\011\ufff8\001\002\000\006" +
    "\010\042\012\041\001\002\000\016\002\uffff\004\uffff\005" +
    "\uffff\006\045\007\044\011\uffff\001\002\000\006\010\042" +
    "\012\041\001\002\000\006\010\042\012\041\001\002\000" +
    "\016\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb" +
    "\001\002\000\016\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\011\ufffc\001\002\000\016\002\ufffe\004\ufffe\005\ufffe" +
    "\006\045\007\044\011\ufffe\001\002\000\022\002\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\001\002\000\022\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\001\002\000\016\004\013" +
    "\005\005\006\014\007\007\010\054\012\052\001\002\000" +
    "\014\004\013\005\005\006\014\007\007\010\054\001\002" +
    "\000\022\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\001\002\000\016\004\013\005\005" +
    "\006\014\007\007\010\054\012\052\001\002\000\022\002" +
    "\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\001\002\000\004\002\000\001\002\000\016\004" +
    "\013\005\005\006\014\007\007\010\054\012\052\001\002" +
    "\000\022\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\001\002\000\016\004\013\005\005" +
    "\006\014\007\007\010\054\012\052\001\002\000\022\002" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\020\002\010\003\007\004\005\005\003\006" +
    "\017\007\016\011\014\001\001\000\002\001\001\000\006" +
    "\010\062\011\050\001\001\000\002\001\001\000\006\010" +
    "\060\011\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\055\011\050\001\001\000" +
    "\006\010\052\011\050\001\001\000\002\001\001\000\016" +
    "\003\032\004\005\005\003\006\024\007\016\011\033\001" +
    "\001\000\006\006\022\007\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\022\007\021\001\001\000" +
    "\002\001\001\000\006\006\024\007\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\047\005\003\001\001\000\006\004\042\005\003" +
    "\001\001\000\002\001\001\000\010\003\032\004\005\005" +
    "\003\001\001\000\002\001\001\000\004\005\046\001\001" +
    "\000\004\005\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\054\011\050\001\001\000\004\011\033\001" +
    "\001\000\002\001\001\000\006\010\056\011\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\061\011" +
    "\050\001\001\000\002\001\001\000\006\010\063\011\050" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // G ::= NUMBER 
            {
              Container RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
          Container container = new Container();  
          container.setValue(num);
          container.setPostfix(num.toString());
          container.setInfix(num.toString());
          container.setIsPrefix(true);
          RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // G ::= H 
            {
              Container RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container h = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = h;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // H ::= LPAREN H RPAREN 
            {
              Container RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container h = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = h;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // H ::= DIVIDE G G 
            {
              Container RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container g1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container g2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Container container = new Container();
            container.setValue(g1.getValue()/g2.getValue());
            container.setPostfix(g1.getPostfix()+" "+g2.getPostfix()+ " /");
            container.setInfix("( "+ g1.getInfix()+ " / "+g2.getInfix()+ " )");
            container.setIsPrefix(true);
            RESULT =container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // H ::= TIMES G G 
            {
              Container RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container g1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container g2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Container container = new Container();
            container.setValue(g1.getValue()*g2.getValue());
            container.setPostfix(g1.getPostfix()+" "+g2.getPostfix()+ " *");
            container.setInfix("( "+ g1.getInfix()+ " * "+g2.getInfix()+ " )");
            container.setIsPrefix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // H ::= MINUS G G 
            {
              Container RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container g1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container g2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Container container = new Container();
            container.setValue(g1.getValue()-g2.getValue());
            container.setPostfix(g1.getPostfix()+" "+g2.getPostfix()+ " -");
            container.setInfix("( "+ g1.getInfix()+ " - "+g2.getInfix()+ " )");
            container.setIsPrefix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // H ::= PLUS G G 
            {
              Container RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container g1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container g2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            Container container = new Container();
            container.setValue(g1.getValue()+g2.getValue());
            container.setPostfix(g1.getPostfix()+" "+g2.getPostfix()+ " +");
            container.setInfix("( "+ g1.getInfix()+ " + "+g2.getInfix()+ " )");
            container.setIsPrefix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // A ::= H 
            {
              Container RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container h = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = h;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // F ::= NUMBER 
            {
              Container RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            Container container = new Container();      
            container.setValue(num);
            container.setPrefix(num.toString());
            container.setInfix(num.toString());
            container.setIsPostfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // F ::= E 
            {
              Container RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container e = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= LPAREN E RPAREN 
            {
              Container RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container e = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= F F DIVIDE 
            {
              Container RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container f1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container f2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Container container = new Container();
            container.setValue(f1.getValue()/f2.getValue());
            container.setPrefix("/ "+f1.getPrefix()+" "+f2.getPrefix());
            container.setInfix("( "+ f1.getInfix()+ " / "+f2.getInfix()+ " )");
            container.setIsPostfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= F F TIMES 
            {
              Container RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container f1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container f2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Container container = new Container();
            container.setValue(f1.getValue() * f2.getValue());
            container.setPrefix("* "+ f1.getPrefix() + " " + f2.getPrefix());
            container.setInfix("( "+ f1.getInfix() + " * "+ f2.getInfix() + " )");
            container.setIsPostfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= F F MINUS 
            {
              Container RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container f1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container f2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Container container = new Container();
            container.setValue(f1.getValue() - f2.getValue());
            container.setPrefix("- " + f1.getPrefix() + " " + f2.getPrefix());
            container.setInfix("( "+ f1.getInfix() + " - " + f2.getInfix() + " )");
            container.setIsPostfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= F F PLUS 
            {
              Container RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container f1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container f2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
            Container container = new Container();
            container.setValue(f1.getValue()+f2.getValue());    
            container.setPrefix("+ "+ f1.getPrefix() +" " + f2.getPrefix());
            container.setInfix("( "+ f1.getInfix()+ " + " + f2.getInfix() +" )");
            container.setIsPostfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // A ::= E 
            {
              Container RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container e = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // D ::= NUMBER 
            {
              Container RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Container container = new Container();
            container.setValue(num);
            container.setPrefix(num.toString());
            container.setPostfix(num.toString());
            container.setIsInfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // D ::= LPAREN B RPAREN 
            {
              Container RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container b = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // C ::= D 
            {
              Container RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container d = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = d;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // C ::= C TIMES D 
            {
              Container RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container c = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container d = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          Container container = new Container();
          container.setValue(c.getValue() * d.getValue());  
          container.setPrefix("* " + c.getPrefix() + " " + d.getPrefix());
          container.setPostfix(c.getPostfix() +" " + d.getPostfix() + " *");
          container.setIsInfix(true);
          RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // C ::= C DIVIDE D 
            {
              Container RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container c = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container d = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          Container container = new Container();  
          container.setValue(c.getValue() / d.getValue());
          container.setPrefix("/ " + c.getPrefix() + " " + d.getPrefix());
          container.setPostfix(c.getPostfix() + " " + d.getPostfix() + " /");
          container.setIsInfix(true);
          RESULT = container;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // B ::= C 
            {
              Container RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container c = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = c;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // B ::= B PLUS C 
            {
              Container RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container b = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container c = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          Container container = new Container();
          container.setValue(b.getValue() + c.getValue());  
          container.setPrefix("+ " + b.getPrefix() + " " + c.getPrefix());
          container.setPostfix(b.getPostfix() + " " + c.getPostfix() + " +");
          container.setIsInfix(true);
          RESULT = container; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // B ::= B MINUS C 
            {
              Container RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container b = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container c = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          Container container = new Container();  
          container.setValue(b.getValue() - c.getValue());
          container.setPrefix("- " + b.getPrefix() + " " + c.getPrefix());
          container.setPostfix(b.getPostfix() + " " + c.getPostfix() + " -");
          container.setIsInfix(true);
          RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container start_val = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // A ::= B 
            {
              Container RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container b = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            RESULT = b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

