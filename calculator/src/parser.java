
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 07 21:53:29 ICT 2019
//----------------------------------------------------

package src;

import java.util.Hashtable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 07 21:53:29 ICT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\012\005\000\002\012\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\003\000\002\004\005\000" +
    "\002\004\005\000\002\004\003\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\002\003\000\002\002" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\002\003\000\002" +
    "\002\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\010\003" +
    "\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\020\004\014\005\004\006\016\007\007\010" +
    "\020\014\015\015\013\001\002\000\020\004\014\005\004" +
    "\006\016\007\007\010\061\014\057\015\056\001\002\000" +
    "\016\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7" +
    "\001\002\000\016\002\ufffa\004\ufffa\005\ufffa\006\052\007" +
    "\051\011\ufffa\001\002\000\020\004\014\005\004\006\016" +
    "\007\007\010\061\014\057\015\056\001\002\000\010\002" +
    "\001\004\043\005\044\001\002\000\004\002\077\001\002" +
    "\000\004\013\070\001\002\000\024\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\uffeb\011\ufff5\014\uffeb\015\uffeb" +
    "\001\002\000\020\004\014\005\004\006\016\007\007\010" +
    "\061\014\057\015\056\001\002\000\024\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\uffea\012\064\014\uffea\015" +
    "\uffea\001\002\000\020\004\014\005\004\006\016\007\007" +
    "\010\061\014\057\015\056\001\002\000\004\002\uffe9\001" +
    "\002\000\020\004\014\005\004\006\016\007\007\010\020" +
    "\014\037\015\013\001\002\000\010\010\026\014\027\015" +
    "\023\001\002\000\012\002\ufff3\010\uffec\014\uffec\015\uffec" +
    "\001\002\000\020\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\014\uffeb\015\uffeb\001\002\000\020\004\034\005\032" +
    "\006\035\007\033\010\026\014\027\015\023\001\002\000" +
    "\020\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\014\uffec" +
    "\015\uffec\001\002\000\010\010\026\014\027\015\023\001" +
    "\002\000\020\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\014\uffea\015\uffea\001\002\000\012\010\uffec\011\031\014" +
    "\uffec\015\uffec\001\002\000\024\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\014\uffed\015\uffed\001" +
    "\002\000\024\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\014\ufff0\015\ufff0\001\002\000\024\002" +
    "\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\014\uffee\015\uffee\001\002\000\024\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\014\ufff1\015\ufff1" +
    "\001\002\000\024\002\uffef\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\014\uffef\015\uffef\001\002\000\010" +
    "\004\043\005\044\011\042\001\002\000\022\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\uffea\011\ufff4\014\uffea\015\uffea" +
    "\001\002\000\004\011\041\001\002\000\024\002\uffe3\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\014\uffe3" +
    "\015\uffe3\001\002\000\016\002\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\011\ufff6\001\002\000\010\010\046\014\050" +
    "\015\045\001\002\000\010\010\046\014\050\015\045\001" +
    "\002\000\016\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\011\ufff5\001\002\000\010\010\046\014\050\015\045\001" +
    "\002\000\016\002\ufffc\004\ufffc\005\ufffc\006\052\007\051" +
    "\011\ufffc\001\002\000\016\002\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\011\ufff4\001\002\000\010\010\046\014\050" +
    "\015\045\001\002\000\010\010\046\014\050\015\045\001" +
    "\002\000\016\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\011\ufff8\001\002\000\016\002\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\011\ufff9\001\002\000\016\002\ufffb\004\ufffb" +
    "\005\ufffb\006\052\007\051\011\ufffb\001\002\000\024\002" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\014\uffe1\015\uffe1\001\002\000\024\002\uffe0\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\014\uffe0\015\uffe0" +
    "\001\002\000\024\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\014\uffe2\015\uffe2\001\002\000\014" +
    "\004\014\005\004\006\016\007\007\010\061\001\002\000" +
    "\020\004\014\005\004\006\016\007\007\010\061\014\057" +
    "\015\056\001\002\000\024\002\uffe5\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\014\uffe5\015\uffe5\001\002" +
    "\000\004\015\065\001\002\000\004\013\ufffd\001\002\000" +
    "\020\004\014\005\004\006\016\007\007\010\061\014\057" +
    "\015\056\001\002\000\024\002\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\014\uffe7\015\uffe7\001\002" +
    "\000\020\004\014\005\004\006\016\007\007\010\020\014" +
    "\015\015\013\001\002\000\010\002\uffff\004\043\005\044" +
    "\001\002\000\004\013\ufffe\001\002\000\004\002\uffe8\001" +
    "\002\000\012\002\ufff2\010\uffec\014\uffec\015\uffec\001\002" +
    "\000\004\014\076\001\002\000\004\012\064\001\002\000" +
    "\004\002\000\001\002\000\020\004\014\005\004\006\016" +
    "\007\007\010\061\014\057\015\056\001\002\000\024\002" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\014\uffe4\015\uffe4\001\002\000\020\004\014\005\004\006" +
    "\016\007\007\010\061\014\057\015\056\001\002\000\024" +
    "\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\014\uffe6\015\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\022\002\010\003\007\004\005\005\004\006" +
    "\021\007\020\011\016\012\011\001\001\000\006\010\101" +
    "\011\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\077\011\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\065\011\057\001\001\000\002\001\001\000\006\010\061" +
    "\011\057\001\001\000\002\001\001\000\016\003\035\004" +
    "\005\005\004\006\027\007\020\011\037\001\001\000\006" +
    "\006\024\007\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\024\007\023\001\001\000\002\001\001" +
    "\000\006\006\027\007\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\054\005\004\001\001\000" +
    "\006\004\046\005\004\001\001\000\002\001\001\000\010" +
    "\003\035\004\005\005\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\053\001\001\000\004\005\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\037\001\001\000\006\010\062\011\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\066\011\057\001\001\000\002\001\001\000" +
    "\020\003\070\004\005\005\004\006\073\007\020\011\072" +
    "\012\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\100\011" +
    "\057\001\001\000\002\001\001\000\006\010\102\011\057" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    Hashtable<String, Double> h = new Hashtable<String, Double>();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // G ::= VARIABLE 
            {
              Container RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Container container = new Container();
            container.setValue(h.get(v));
            container.setPostfix(v);
            container.setInfix(v);
            container.setIsPrefix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // G ::= NUMBER 
            {
              Container RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
          Container container = new Container();  
          container.setValue(n);
          container.setPostfix(n.toString());
          container.setInfix(n.toString());
          container.setIsPrefix(true);
          RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // G ::= H 
            {
              Container RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container h = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = h;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // H ::= LPAREN H RPAREN 
            {
              Container RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container h = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = h;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // H ::= DIVIDE G G 
            {
              Container RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container g1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container g2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Container container = new Container();
            container.setValue(g1.getValue()/g2.getValue());
            container.setPostfix(g1.getPostfix()+" "+g2.getPostfix()+ " /");
            container.setInfix("( "+ g1.getInfix()+ " / "+g2.getInfix()+ " )");
            container.setIsPrefix(true);
            RESULT =container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // H ::= TIMES G G 
            {
              Container RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container g1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container g2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Container container = new Container();
            container.setValue(g1.getValue()*g2.getValue());
            container.setPostfix(g1.getPostfix()+" "+g2.getPostfix()+ " *");
            container.setInfix("( "+ g1.getInfix()+ " * "+g2.getInfix()+ " )");
            container.setIsPrefix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // H ::= MINUS G G 
            {
              Container RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container g1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container g2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Container container = new Container();
            container.setValue(g1.getValue()-g2.getValue());
            container.setPostfix(g1.getPostfix()+" "+g2.getPostfix()+ " -");
            container.setInfix("( "+ g1.getInfix()+ " - "+g2.getInfix()+ " )");
            container.setIsPrefix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // H ::= PLUS G G 
            {
              Container RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container g1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container g2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            Container container = new Container();
            container.setValue(g1.getValue()+g2.getValue());
            container.setPostfix(g1.getPostfix()+" "+g2.getPostfix()+ " +");
            container.setInfix("( "+ g1.getInfix()+ " + "+g2.getInfix()+ " )");
            container.setIsPrefix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // A ::= X SEMI H 
            {
              Container RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container x = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container h = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = h;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // A ::= H 
            {
              Container RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container h = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = h;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // F ::= VARIABLE 
            {
              Container RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Container container = new Container();
            container.setValue(h.get(v));
            container.setPrefix(v);
            container.setInfix(v);
            container.setIsPostfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // F ::= NUMBER 
            {
              Container RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            Container container = new Container();      
            container.setValue(n);
            container.setPrefix(n.toString());
            container.setInfix(n.toString());
            container.setIsPostfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // F ::= E 
            {
              Container RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container e = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= LPAREN E RPAREN 
            {
              Container RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container e = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= F F DIVIDE 
            {
              Container RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container f1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container f2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Container container = new Container();
            container.setValue(f1.getValue()/f2.getValue());
            container.setPrefix("/ "+f1.getPrefix()+" "+f2.getPrefix());
            container.setInfix("( "+ f1.getInfix()+ " / "+f2.getInfix()+ " )");
            container.setIsPostfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= F F TIMES 
            {
              Container RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container f1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container f2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Container container = new Container();
            container.setValue(f1.getValue() * f2.getValue());
            container.setPrefix("* "+ f1.getPrefix() + " " + f2.getPrefix());
            container.setInfix("( "+ f1.getInfix() + " * "+ f2.getInfix() + " )");
            container.setIsPostfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= F F MINUS 
            {
              Container RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container f1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container f2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Container container = new Container();
            container.setValue(f1.getValue() - f2.getValue());
            container.setPrefix("- " + f1.getPrefix() + " " + f2.getPrefix());
            container.setInfix("( "+ f1.getInfix() + " - " + f2.getInfix() + " )");
            container.setIsPostfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= F F PLUS 
            {
              Container RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container f1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container f2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
            Container container = new Container();
            container.setValue(f1.getValue()+f2.getValue());    
            container.setPrefix("+ "+ f1.getPrefix() +" " + f2.getPrefix());
            container.setInfix("( "+ f1.getInfix()+ " + " + f2.getInfix() +" )");
            container.setIsPostfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // A ::= X SEMI E 
            {
              Container RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container x = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container e = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // A ::= E 
            {
              Container RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container e = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // D ::= VARIABLE 
            {
              Container RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Container container = new Container();
            container.setValue(h.get(v));
            container.setPrefix(v);
            container.setPostfix(v);
            container.setIsInfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // D ::= NUMBER 
            {
              Container RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Container container = new Container();
            container.setValue(n);
            container.setPrefix(n.toString());
            container.setPostfix(n.toString());
            container.setIsInfix(true);
            RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // D ::= LPAREN B RPAREN 
            {
              Container RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container b = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // C ::= D 
            {
              Container RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container d = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = d;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // C ::= C TIMES D 
            {
              Container RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container c = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container d = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          Container container = new Container();
          container.setValue(c.getValue() * d.getValue());  
          container.setPrefix("* " + c.getPrefix() + " " + d.getPrefix());
          container.setPostfix(c.getPostfix() +" " + d.getPostfix() + " *");
          container.setIsInfix(true);
          RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // C ::= C DIVIDE D 
            {
              Container RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container c = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container d = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          Container container = new Container();  
          container.setValue(c.getValue() / d.getValue());
          container.setPrefix("/ " + c.getPrefix() + " " + d.getPrefix());
          container.setPostfix(c.getPostfix() + " " + d.getPostfix() + " /");
          container.setIsInfix(true);
          RESULT = container;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // B ::= C 
            {
              Container RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container c = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = c;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // B ::= B PLUS C 
            {
              Container RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container b = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container c = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          Container container = new Container();
          container.setValue(b.getValue() + c.getValue());  
          container.setPrefix("+ " + b.getPrefix() + " " + c.getPrefix());
          container.setPostfix(b.getPostfix() + " " + c.getPostfix() + " +");
          container.setIsInfix(true);
          RESULT = container; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // B ::= B MINUS C 
            {
              Container RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container b = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container c = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          Container container = new Container();  
          container.setValue(b.getValue() - c.getValue());
          container.setPrefix("- " + b.getPrefix() + " " + c.getPrefix());
          container.setPostfix(b.getPostfix() + " " + c.getPostfix() + " -");
          container.setIsInfix(true);
          RESULT = container;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // X ::= VARIABLE ASSIGNER NUMBER 
            {
              Container RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            h.put(v,n);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // X ::= X SEMI X 
            {
              Container RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container x1 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container x2 = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("X",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A ::= X SEMI B 
            {
              Container RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Container x = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container b = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Container start_val = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // A ::= B 
            {
              Container RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Container b = (Container)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            RESULT = b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

